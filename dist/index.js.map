{"version":3,"sources":["../index.js"],"names":["TOKEN","get","bot","webHook","port","autoOpen","openWebHook","setWebHook","breadcrumbs","currentLang","newsPosition","optsBack","reply_markup","JSON","stringify","keyboard","back","onText","RegExp","msg","source","match","start","currency","selectCurrency","setting","settings","language","chooseLang","news","getNews","setLang","getCurrency","sendMessage","chat","id","push","opts","ATMs","branchBank","startText","changeLang","load","err","rss","console","log","items","length","map","item","title","description","pubDate","inline_keyboard","text","url","link","callback_data","on","query","data","editMessageText","chat_id","message","message_id","answerCallbackQuery","notification","settingText","futurelang","langChanged","pop"],"mappings":"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","file":"index.js","sourcesContent":["import TelegramBot from 'node-telegram-bot-api'\nimport Feed from 'feed-to-json';\nimport config from 'config'\nimport { lang } from './lang'\n\nconst TOKEN = config.get(\"token\");\nconst bot = new TelegramBot(TOKEN, {\n    webHook: {\n        port: config.get(\"port\"),\n        autoOpen: false\n    }\n});\nbot.openWebHook();\nbot.setWebHook(`${config.get(\"url\")}/bot${TOKEN}`);\n\nlet breadcrumbs = [];\nlet currentLang = 'ru';\nlet newsPosition = 0;\nconst optsBack = {\n    reply_markup: JSON.stringify({\n        keyboard: [\n            [lang[currentLang].back]\n        ]\n    })\n};\n\n\nbot.onText(new RegExp(`(.+)`), (msg, [source, match]) => {\n    switch (match) {\n        case '/start':\n            start(msg);\n            break;\n        case lang[currentLang].currency:  //Валюта\n            selectCurrency(msg);\n            break;\n        case lang[currentLang].setting:  //Настройка\n            settings(msg);\n            break;\n        case lang[currentLang].language:  //Языки\n            chooseLang(msg);\n            break;\n        case lang[currentLang].news:    //Новости\n            getNews(msg);\n            break;\n\n        case 'Қазақша':\n            setLang(msg, 'kz');\n            break;\n        case 'Русский':\n            setLang(msg, 'ru');\n            break;\n        case 'English':\n            setLang(msg, 'en');\n            break;\n        case 'usd': case 'USD':\n            getCurrency(msg, 'USD');\n            break;\n        case 'rub': case 'RUB':\n            getCurrency(msg, 'RUB');\n            break;\n        case 'eur': case 'EUR':\n            getCurrency(msg, 'EUR');\n            break;\n        case lang[currentLang].back:   //Назад\n            back(msg);\n            break;\n        default:\n            bot.sendMessage(msg.chat.id, 'Такой команды нет');\n    }\n});\n\n\nfunction start(msg) {\n    breadcrumbs.push('start');\n    const opts = {\n        reply_markup: JSON.stringify({\n            keyboard: [\n                [\n                    lang[currentLang].currency,\n                    lang[currentLang].news\n                ],\n                [\n                    lang[currentLang].ATMs,\n                    lang[currentLang].branchBank\n                ],\n                [\n                    lang[currentLang].setting\n                ]\n            ]\n        })\n    };\n    bot.sendMessage(msg.chat.id, lang[currentLang].startText, opts);\n}\nfunction selectCurrency(msg) {\n    breadcrumbs.push('selectCurrency');\n    const opts = {\n        reply_markup: JSON.stringify({\n            keyboard: [\n                ['USD','EUR','RUB'],\n                [lang[currentLang].back]\n            ]\n        })\n    };\n    bot.sendMessage(msg.chat.id, lang[currentLang].changeLang, opts);\n}\nfunction getCurrency(msg, currency) {\n    breadcrumbs.push('getCurrency');\n    const { chat: { id }} = msg;\n    Feed.load('http://www.nationalbank.kz/rss/rates_all.xml', function(err, rss) {\n        console.log(rss.items.length)\n        rss.items.map(item => {\n            if (item.title === currency) {\n                bot.sendMessage(id, `${currency}: ` + item.description, optsBack);\n            }\n        });\n    });\n}\nfunction getNews(msg) {\n    breadcrumbs.push('getNews');\n    const { chat: { id }} = msg;\n    Feed.load('http://st.zakon.kz/rss/rss_all.xml', function (err, rss) {\n        console.log(rss.items.length);\n        bot.sendMessage(\n            id,\n            `${rss.items[newsPosition].title}\\n\\n${rss.items[newsPosition].description}\\n\\n${rss.items[newsPosition].pubDate}`,\n            {\n            reply_markup: {\n                inline_keyboard: [\n                    [\n                        {\n                            text: 'Ссылка',\n                            url: `${rss.items[newsPosition].link}`\n                        }\n                    ],\n                    [\n                        {\n                            text: '<-',\n                            callback_data: 'prev'\n                        },\n                        {\n                            text: '->',\n                            callback_data: 'next'\n                        }\n                    ]\n                ]\n            }\n        });\n        bot.on('callback_query', query => {\n            console.log(query);\n            if(query.data === 'prev' && newsPosition !== 0) {\n                newsPosition = newsPosition - 1;\n            } else if(query.data === 'next' && newsPosition !== 42) {\n                newsPosition = newsPosition + 1;\n            }\n            bot.editMessageText(\n                `${rss.items[newsPosition].title}\\n\\n${rss.items[newsPosition].description}\\n\\n${rss.items[newsPosition].pubDate}`,\n                {\n                    chat_id: query.message.chat.id,\n                    message_id: query.message.message_id,\n                    reply_markup: {\n                        inline_keyboard: [\n                            [\n                                {\n                                    text: 'Ссылка',\n                                    url: `${rss.items[newsPosition].link}`\n                                }\n                            ],\n                            [\n                                {\n                                    text: '<-',\n                                    callback_data: 'prev'\n                                },\n                                {\n                                    text: '->',\n                                    callback_data: 'next'\n                                }\n                            ]\n                        ]\n                    }\n                }\n            );\n            bot.answerCallbackQuery(query.id, `Новости`)\n        });\n    })\n}\nfunction settings(msg) {\n    breadcrumbs.push('settings');\n    const opts = {\n        reply_markup: JSON.stringify({\n            keyboard: [\n                [\n                    lang[currentLang].language,\n                    lang[currentLang].notification\n                ],\n                [lang[currentLang].back]\n            ]\n        })\n    };\n    bot.sendMessage(msg.chat.id, lang[currentLang].settingText, opts);\n}\nfunction chooseLang(msg) {\n    breadcrumbs.push('chooseLang');\n    const opts = {\n        reply_markup: JSON.stringify({\n            keyboard: [\n                ['Қазақша', 'Русский', 'English'],\n                [lang[currentLang].back]\n            ]\n        })\n    };\n    bot.sendMessage(msg.chat.id, lang[currentLang].changeLang, opts);\n}\nfunction setLang(msg, futurelang) {\n    currentLang = futurelang;\n    bot.sendMessage(msg.chat.id, lang[currentLang].langChanged, {\n        reply_markup: JSON.stringify({\n            keyboard: [\n                [lang[currentLang].back]\n            ]\n        })\n    });\n}\n\n\nfunction back(msg) {\n    breadcrumbs.pop();\n    switch (breadcrumbs[breadcrumbs.length - 1]) {\n        case 'start':            start(msg);          break;\n        case 'selectCurrency':   selectCurrency(msg); break;\n        case 'settings':         settings(msg);       break;\n        case 'chooseLang':       chooseLang(msg);     break;\n        default:                 start(msg);          break;\n    }\n    breadcrumbs.pop();\n}"]}